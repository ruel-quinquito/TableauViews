CREATE OR REPLACE VIEW tableau.sls_a_customerexp
(
  accountid,
  accounstatus_current,
  assigned_to,
  assignment_date,
  callstartdts,
  callstatus,
  targetmodel,
  purchasedsuggestedproduct,
  suggested_product,
  sales3monthprior,
  cases3monthprior,
  units3monthprior,
  sales6monthprior,
  cases6monthprior,
  units6monthprior,
  sales3monthafter,
  cases3monthafter,
  units3monthafter,
  sales6monthafter,
  cases6monthafter,
  units6monthafter
)
AS 
 SELECT threeprior.accountid, threeprior.accounstatus_current, threeprior.assignto AS assigned_to, threeprior.assignment_date, threeprior.callstartdts, threeprior.callstatus, threeprior.targetmodel, COALESCE(trea.purchasedsuggestedproduct, 0) AS purchasedsuggestedproduct, threeprior.suggested_product, threeprior.sales3monthprior, threeprior.cases3monthprior, threeprior.units3monthprior, sixp.sales6monthprior, sixp.cases6monthprior, sixp.units6monthprior, trea.sales3monthafter, trea.cases3monthafter, trea.units3monthafter, sixa.sales6monthafter, sixa.cases6monthafter, sixa.units6monthafter
   FROM ( SELECT tot.accountid, tot.accounstatus_current, tot.assignment_date, sum(tot.totalcharge) AS sales3monthprior, count(DISTINCT tot.orderid) AS cases3monthprior, sum(tot.quantity) AS units3monthprior, tot.callstartdts, tot.targetmodel, tot.suggested_product, tot.callstatus, tot.assignto
           FROM ( SELECT a.doctorid AS accountid, cs.accountstatus_current AS accounstatus_current, split_part(cs.rowid::text, ' '::text, 1) AS assignment_date, a.orderid, c.totalcharge, c.quantity, date(cs.callstartdts) AS callstartdts, cs.targetmodel, cs.suggested_product, cs.callstatus, cs.assignto
                   FROM fct."order" a
              LEFT JOIN fct.orderitem c ON a.orderid = c.orderid
         LEFT JOIN (( SELECT rds_predictiveanalysis_callscripts.datamodel_accountid AS accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product AS suggested_product, "max"(rds_predictiveanalysis_callscripts.messageutc) AS callstartdts, maxstatus.status AS accountstatus_current, rds_predictiveanalysis_callscripts.callstatus_wording AS callstatus, rds_predictiveanalysis_callscripts."user" AS assignto
                      FROM import.rds_predictiveanalysis_callscripts
                 JOIN ( SELECT pg_catalog.row_number()
                             OVER( 
                             PARTITION BY rds_predictiveanalysis_accountupdate.accountid
                             ORDER BY rds_predictiveanalysis_accountupdate.messagecreateddate DESC) AS statusrank, rds_predictiveanalysis_accountupdate.messagecreateddate, rds_predictiveanalysis_accountupdate.accountid, rds_predictiveanalysis_accountupdate.status
                              FROM import.rds_predictiveanalysis_accountupdate) maxstatus ON rds_predictiveanalysis_callscripts.rowid::text = maxstatus.accountid::text
                WHERE maxstatus.statusrank = 1 AND maxstatus.status::text = 'Completed'::text
                GROUP BY rds_predictiveanalysis_callscripts.datamodel_accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product, maxstatus.status, rds_predictiveanalysis_callscripts.callstatus_wording, rds_predictiveanalysis_callscripts."user"
           UNION 
                    SELECT maxcdts.accountid::character varying AS accountid, maxcdts.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, maxcdts.contactdts AS callstartdts, maxstat.status AS accountstatus_current, NULL::character varying AS callstatus, maxstat.assignto
                      FROM ( SELECT pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_customercategory_contacthistory.rowid
                             ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC) AS chrank, split_part(accountchurn_customercategory_contacthistory.rowid::text, ' '::text, 2) AS accountid, accountchurn_customercategory_contacthistory.rowid, accountchurn_customercategory_contacthistory.contactdts
                              FROM test.accountchurn_customercategory_contacthistory
                             WHERE accountchurn_customercategory_contacthistory.talkto IS NOT NULL
                             ORDER BY accountchurn_customercategory_contacthistory.rowid DESC, pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_customercategory_contacthistory.rowid
                             ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC)) maxcdts
                 JOIN ( SELECT accountchurn_customercategory_monitoredaccounts.monitoredaccountid, accountchurn_customercategory_monitoredaccounts.lastmodifieddts, accountchurn_customercategory_monitoredaccounts.assignto, accountchurn_customercategory_monitoredaccounts.status, pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_customercategory_monitoredaccounts.monitoredaccountid
                             ORDER BY accountchurn_customercategory_monitoredaccounts.lastmodifieddts DESC) AS ccmonrank
                              FROM test.accountchurn_customercategory_monitoredaccounts
                             WHERE accountchurn_customercategory_monitoredaccounts.status::text = 'Completed'::text) maxstat ON maxcdts.rowid::text = maxstat.monitoredaccountid::text
                WHERE maxcdts.chrank = 1 AND maxstat.ccmonrank = 1)
           UNION 
                    SELECT ach.accountid::character varying AS accountid, ach.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, ach.contactdts AS callstartdts, maxacstat.status AS accounstatus_current, NULL::character varying AS callstatus, maxacstat.assignto
                      FROM ( SELECT pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_contacthistory.lostaccount_rowid
                             ORDER BY accountchurn_contacthistory.contactdts DESC) AS acchrank, split_part(accountchurn_contacthistory.lostaccount_rowid::text, ' '::text, 2) AS accountid, accountchurn_contacthistory.lostaccount_rowid AS rowid, accountchurn_contacthistory.contactdts
                              FROM test.accountchurn_contacthistory
                             WHERE accountchurn_contacthistory.talkto IS NOT NULL) ach
                 JOIN ( SELECT accountchurn_monitoredaccounts.monitoredaccountid, accountchurn_monitoredaccounts.lastmodifieddts, accountchurn_monitoredaccounts.assignto, accountchurn_monitoredaccounts.status, pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_monitoredaccounts.monitoredaccountid
                             ORDER BY accountchurn_monitoredaccounts.lastmodifieddts DESC) AS acmonrank
                              FROM test.accountchurn_monitoredaccounts
                             WHERE accountchurn_monitoredaccounts.status::text = 'Completed'::text) maxacstat ON ach.rowid::text = maxacstat.monitoredaccountid::text
                WHERE ach.acchrank = 1 AND maxacstat.acmonrank = 1) cs ON a.doctorid::text = cs.accountid::text
        WHERE a.ordertype::text = 'New'::text AND a.dateinlocaldts >= date_add('month'::text, -3::bigint, date(cs.callstartdts)::timestamp without time zone) AND a.dateinlocaldts < date_add('day'::text, date_diff('day'::text, cs.callstartdts, date('now'::text::timestamp(6) with time zone)::timestamp without time zone), date_add('month'::text, -3::bigint, cs.callstartdts))) tot
          GROUP BY tot.accountid, tot.accounstatus_current, tot.assignment_date, tot.callstartdts, tot.targetmodel, tot.suggested_product, tot.callstatus, tot.assignto) threeprior
   LEFT JOIN ( SELECT tot.accountid, sum(tot.totalcharge) AS sales6monthprior, count(DISTINCT tot.orderid) AS cases6monthprior, sum(tot.quantity) AS units6monthprior, tot.callstartdts, tot.targetmodel, tot.suggested_product
           FROM ( SELECT a.doctorid AS accountid, cs.accountstatus_current AS accounstatus_current, a.orderid, c.totalcharge, c.quantity, date(cs.callstartdts) AS callstartdts, cs.targetmodel, cs.suggested_product
                   FROM fct."order" a
              LEFT JOIN fct.orderitem c ON a.orderid = c.orderid
         LEFT JOIN (( SELECT rds_predictiveanalysis_callscripts.datamodel_accountid AS accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product AS suggested_product, "max"(rds_predictiveanalysis_callscripts.messageutc) AS callstartdts, maxstatus.status AS accountstatus_current
                      FROM import.rds_predictiveanalysis_callscripts
                 JOIN ( SELECT pg_catalog.row_number()
                             OVER( 
                             PARTITION BY rds_predictiveanalysis_accountupdate.accountid
                             ORDER BY rds_predictiveanalysis_accountupdate.messagecreateddate DESC) AS statusrank, rds_predictiveanalysis_accountupdate.messagecreateddate, rds_predictiveanalysis_accountupdate.accountid, rds_predictiveanalysis_accountupdate.status
                              FROM import.rds_predictiveanalysis_accountupdate) maxstatus ON rds_predictiveanalysis_callscripts.rowid::text = maxstatus.accountid::text
                WHERE maxstatus.statusrank = 1 AND maxstatus.status::text = 'Completed'::text
                GROUP BY rds_predictiveanalysis_callscripts.datamodel_accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product, maxstatus.status, rds_predictiveanalysis_callscripts.callstatus_wording, rds_predictiveanalysis_callscripts."user"
           UNION 
                    SELECT maxcdts.accountid::character varying AS accountid, maxcdts.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, maxcdts.contactdts AS callstartdts, maxstat.status AS accountstatus_current
                      FROM ( SELECT pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_customercategory_contacthistory.rowid
                             ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC) AS chrank, split_part(accountchurn_customercategory_contacthistory.rowid::text, ' '::text, 2) AS accountid, accountchurn_customercategory_contacthistory.rowid, accountchurn_customercategory_contacthistory.contactdts
                              FROM test.accountchurn_customercategory_contacthistory
                             WHERE accountchurn_customercategory_contacthistory.talkto IS NOT NULL
                             ORDER BY accountchurn_customercategory_contacthistory.rowid DESC, pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_customercategory_contacthistory.rowid
                             ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC)) maxcdts
                 JOIN ( SELECT accountchurn_customercategory_monitoredaccounts.monitoredaccountid, accountchurn_customercategory_monitoredaccounts.lastmodifieddts, accountchurn_customercategory_monitoredaccounts.assignto, accountchurn_customercategory_monitoredaccounts.status, pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_customercategory_monitoredaccounts.monitoredaccountid
                             ORDER BY accountchurn_customercategory_monitoredaccounts.lastmodifieddts DESC) AS ccmonrank
                              FROM test.accountchurn_customercategory_monitoredaccounts
                             WHERE accountchurn_customercategory_monitoredaccounts.status::text = 'Completed'::text) maxstat ON maxcdts.rowid::text = maxstat.monitoredaccountid::text
                WHERE maxcdts.chrank = 1 AND maxstat.ccmonrank = 1)
           UNION 
                    SELECT ach.accountid::character varying AS accountid, ach.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, ach.contactdts AS callstartdts, maxacstat.status AS accounstatus_current
                      FROM ( SELECT pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_contacthistory.lostaccount_rowid
                             ORDER BY accountchurn_contacthistory.contactdts DESC) AS acchrank, split_part(accountchurn_contacthistory.lostaccount_rowid::text, ' '::text, 2) AS accountid, accountchurn_contacthistory.lostaccount_rowid AS rowid, accountchurn_contacthistory.contactdts
                              FROM test.accountchurn_contacthistory
                             WHERE accountchurn_contacthistory.talkto IS NOT NULL) ach
                 JOIN ( SELECT accountchurn_monitoredaccounts.monitoredaccountid, accountchurn_monitoredaccounts.lastmodifieddts, accountchurn_monitoredaccounts.assignto, accountchurn_monitoredaccounts.status, pg_catalog.row_number()
                             OVER( 
                             PARTITION BY accountchurn_monitoredaccounts.monitoredaccountid
                             ORDER BY accountchurn_monitoredaccounts.lastmodifieddts DESC) AS acmonrank
                              FROM test.accountchurn_monitoredaccounts
                             WHERE accountchurn_monitoredaccounts.status::text = 'Completed'::text) maxacstat ON ach.rowid::text = maxacstat.monitoredaccountid::text
                WHERE ach.acchrank = 1 AND maxacstat.acmonrank = 1) cs ON a.doctorid::text = cs.accountid::text
        WHERE a.ordertype::text = 'New'::text AND a.dateinlocaldts >= date_add('month'::text, -6::bigint, date(cs.callstartdts)::timestamp without time zone) AND a.dateinlocaldts < date_add('day'::text, date_diff('day'::text, cs.callstartdts, date('now'::text::timestamp(6) with time zone)::timestamp without time zone), date_add('month'::text, -6::bigint, cs.callstartdts))) tot
          GROUP BY tot.accountid, tot.accounstatus_current, tot.callstartdts, tot.targetmodel, tot.suggested_product) sixp ON threeprior.accountid::text = sixp.accountid::text AND threeprior.callstartdts = sixp.callstartdts
   LEFT JOIN ( SELECT tot.accountid, sum(tot.totalcharge) AS sales3monthafter, count(DISTINCT tot.orderid) AS cases3monthafter, sum(tot.quantity) AS units3monthafter, tot.callstartdts, tot.targetmodel, tot.purchasedsuggestedproduct, tot.suggested_product
      FROM ( SELECT a.doctorid AS accountid, cs.accountstatus_current AS accounstatus_current, a.orderid, c.totalcharge, c.quantity, date(cs.callstartdts) AS callstartdts, cs.targetmodel, 
                   CASE
                       WHEN upper(p.pf_productline::text) = upper(cs.suggested_product::text) THEN 1
                       ELSE 0
                   END AS purchasedsuggestedproduct, cs.suggested_product
              FROM fct."order" a
         LEFT JOIN fct.orderitem c ON a.orderid = c.orderid
    LEFT JOIN dim.products p ON c.productid::text = p.productid::text
   LEFT JOIN (( SELECT rds_predictiveanalysis_callscripts.datamodel_accountid AS accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product AS suggested_product, "max"(rds_predictiveanalysis_callscripts.messageutc) AS callstartdts, maxstatus.status AS accountstatus_current
            FROM import.rds_predictiveanalysis_callscripts
       JOIN ( SELECT pg_catalog.row_number()
                   OVER( 
                   PARTITION BY rds_predictiveanalysis_accountupdate.accountid
                   ORDER BY rds_predictiveanalysis_accountupdate.messagecreateddate DESC) AS statusrank, rds_predictiveanalysis_accountupdate.messagecreateddate, rds_predictiveanalysis_accountupdate.accountid, rds_predictiveanalysis_accountupdate.status
                    FROM import.rds_predictiveanalysis_accountupdate) maxstatus ON rds_predictiveanalysis_callscripts.rowid::text = maxstatus.accountid::text
      WHERE maxstatus.statusrank = 1 AND maxstatus.status::text = 'Completed'::text
      GROUP BY rds_predictiveanalysis_callscripts.datamodel_accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product, maxstatus.status, rds_predictiveanalysis_callscripts.callstatus_wording, rds_predictiveanalysis_callscripts."user"
 UNION 
          SELECT maxcdts.accountid::character varying AS accountid, maxcdts.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, maxcdts.contactdts AS callstartdts, maxstat.status AS accountstatus_current
            FROM ( SELECT pg_catalog.row_number()
                   OVER( 
                   PARTITION BY accountchurn_customercategory_contacthistory.rowid
                   ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC) AS chrank, split_part(accountchurn_customercategory_contacthistory.rowid::text, ' '::text, 2) AS accountid, accountchurn_customercategory_contacthistory.rowid, accountchurn_customercategory_contacthistory.contactdts
                    FROM test.accountchurn_customercategory_contacthistory
                   WHERE accountchurn_customercategory_contacthistory.talkto IS NOT NULL
                   ORDER BY accountchurn_customercategory_contacthistory.rowid DESC, pg_catalog.row_number()
                   OVER( 
                   PARTITION BY accountchurn_customercategory_contacthistory.rowid
                   ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC)) maxcdts
       JOIN ( SELECT accountchurn_customercategory_monitoredaccounts.monitoredaccountid, accountchurn_customercategory_monitoredaccounts.lastmodifieddts, accountchurn_customercategory_monitoredaccounts.assignto, accountchurn_customercategory_monitoredaccounts.status, pg_catalog.row_number()
                   OVER( 
                   PARTITION BY accountchurn_customercategory_monitoredaccounts.monitoredaccountid
                   ORDER BY accountchurn_customercategory_monitoredaccounts.lastmodifieddts DESC) AS ccmonrank
                    FROM test.accountchurn_customercategory_monitoredaccounts
                   WHERE accountchurn_customercategory_monitoredaccounts.status::text = 'Completed'::text) maxstat ON maxcdts.rowid::text = maxstat.monitoredaccountid::text
      WHERE maxcdts.chrank = 1 AND maxstat.ccmonrank = 1)
 UNION 
          SELECT ach.accountid::character varying AS accountid, ach.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, ach.contactdts AS callstartdts, maxacstat.status AS accounstatus_current
            FROM ( SELECT pg_catalog.row_number()
                   OVER( 
                   PARTITION BY accountchurn_contacthistory.lostaccount_rowid
                   ORDER BY accountchurn_contacthistory.contactdts DESC) AS acchrank, split_part(accountchurn_contacthistory.lostaccount_rowid::text, ' '::text, 2) AS accountid, accountchurn_contacthistory.lostaccount_rowid AS rowid, accountchurn_contacthistory.contactdts
                    FROM test.accountchurn_contacthistory
                   WHERE accountchurn_contacthistory.talkto IS NOT NULL) ach
       JOIN ( SELECT accountchurn_monitoredaccounts.monitoredaccountid, accountchurn_monitoredaccounts.lastmodifieddts, accountchurn_monitoredaccounts.assignto, accountchurn_monitoredaccounts.status, pg_catalog.row_number()
                   OVER( 
                   PARTITION BY accountchurn_monitoredaccounts.monitoredaccountid
                   ORDER BY accountchurn_monitoredaccounts.lastmodifieddts DESC) AS acmonrank
                    FROM test.accountchurn_monitoredaccounts
                   WHERE accountchurn_monitoredaccounts.status::text = 'Completed'::text) maxacstat ON ach.rowid::text = maxacstat.monitoredaccountid::text
      WHERE ach.acchrank = 1 AND maxacstat.acmonrank = 1) cs ON a.doctorid::text = cs.accountid::text
  WHERE a.ordertype::text = 'New'::text AND a.dateinlocaldts >= date(cs.callstartdts) AND a.dateinvoicedlocaldts <= date_add('month'::text, 3::bigint, date(cs.callstartdts)::timestamp without time zone)) tot
     GROUP BY tot.accountid, tot.accounstatus_current, tot.callstartdts, tot.targetmodel, tot.purchasedsuggestedproduct, tot.suggested_product) trea ON threeprior.accountid::text = trea.accountid::text AND threeprior.callstartdts = trea.callstartdts
   LEFT JOIN ( SELECT tot.accountid, sum(tot.totalcharge) AS sales6monthafter, count(DISTINCT tot.orderid) AS cases6monthafter, sum(tot.quantity) AS units6monthafter, tot.callstartdts, tot.targetmodel, tot.suggested_product
   FROM ( SELECT a.doctorid AS accountid, cs.accountstatus_current AS accounstatus_current, a.orderid, c.totalcharge, c.quantity, date(cs.callstartdts) AS callstartdts, cs.targetmodel, cs.suggested_product
           FROM fct."order" a
      LEFT JOIN fct.orderitem c ON a.orderid = c.orderid
   LEFT JOIN (( SELECT rds_predictiveanalysis_callscripts.datamodel_accountid AS accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product AS suggested_product, "max"(rds_predictiveanalysis_callscripts.messageutc) AS callstartdts, maxstatus.status AS accountstatus_current
              FROM import.rds_predictiveanalysis_callscripts
         JOIN ( SELECT pg_catalog.row_number()
                     OVER( 
                     PARTITION BY rds_predictiveanalysis_accountupdate.accountid
                     ORDER BY rds_predictiveanalysis_accountupdate.messagecreateddate DESC) AS statusrank, rds_predictiveanalysis_accountupdate.messagecreateddate, rds_predictiveanalysis_accountupdate.accountid, rds_predictiveanalysis_accountupdate.status
                      FROM import.rds_predictiveanalysis_accountupdate) maxstatus ON rds_predictiveanalysis_callscripts.rowid::text = maxstatus.accountid::text
        WHERE maxstatus.statusrank = 1 AND maxstatus.status::text = 'Completed'::text
        GROUP BY rds_predictiveanalysis_callscripts.datamodel_accountid, rds_predictiveanalysis_callscripts.rowid, rds_predictiveanalysis_callscripts.targetmodel, rds_predictiveanalysis_callscripts.datamodel_suggested_product, maxstatus.status, rds_predictiveanalysis_callscripts.callstatus_wording, rds_predictiveanalysis_callscripts."user"
   UNION 
            SELECT maxcdts.accountid::character varying AS accountid, maxcdts.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, maxcdts.contactdts AS callstartdts, maxstat.status AS accountstatus_current
              FROM ( SELECT pg_catalog.row_number()
                     OVER( 
                     PARTITION BY accountchurn_customercategory_contacthistory.rowid
                     ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC) AS chrank, split_part(accountchurn_customercategory_contacthistory.rowid::text, ' '::text, 2) AS accountid, accountchurn_customercategory_contacthistory.rowid, accountchurn_customercategory_contacthistory.contactdts
                      FROM test.accountchurn_customercategory_contacthistory
                     WHERE accountchurn_customercategory_contacthistory.talkto IS NOT NULL
                     ORDER BY accountchurn_customercategory_contacthistory.rowid DESC, pg_catalog.row_number()
                     OVER( 
                     PARTITION BY accountchurn_customercategory_contacthistory.rowid
                     ORDER BY accountchurn_customercategory_contacthistory.contactdts DESC)) maxcdts
         JOIN ( SELECT accountchurn_customercategory_monitoredaccounts.monitoredaccountid, accountchurn_customercategory_monitoredaccounts.lastmodifieddts, accountchurn_customercategory_monitoredaccounts.assignto, accountchurn_customercategory_monitoredaccounts.status, pg_catalog.row_number()
                     OVER( 
                     PARTITION BY accountchurn_customercategory_monitoredaccounts.monitoredaccountid
                     ORDER BY accountchurn_customercategory_monitoredaccounts.lastmodifieddts DESC) AS ccmonrank
                      FROM test.accountchurn_customercategory_monitoredaccounts
                     WHERE accountchurn_customercategory_monitoredaccounts.status::text = 'Completed'::text) maxstat ON maxcdts.rowid::text = maxstat.monitoredaccountid::text
        WHERE maxcdts.chrank = 1 AND maxstat.ccmonrank = 1)
   UNION 
            SELECT ach.accountid::character varying AS accountid, ach.rowid, NULL::character varying AS targetmodel, NULL::character varying AS suggested_product, ach.contactdts AS callstartdts, maxacstat.status AS accounstatus_current
              FROM ( SELECT pg_catalog.row_number()
                     OVER( 
                     PARTITION BY accountchurn_contacthistory.lostaccount_rowid
                     ORDER BY accountchurn_contacthistory.contactdts DESC) AS acchrank, split_part(accountchurn_contacthistory.lostaccount_rowid::text, ' '::text, 2) AS accountid, accountchurn_contacthistory.lostaccount_rowid AS rowid, accountchurn_contacthistory.contactdts
                      FROM test.accountchurn_contacthistory
                     WHERE accountchurn_contacthistory.talkto IS NOT NULL) ach
         JOIN ( SELECT accountchurn_monitoredaccounts.monitoredaccountid, accountchurn_monitoredaccounts.lastmodifieddts, accountchurn_monitoredaccounts.assignto, accountchurn_monitoredaccounts.status, pg_catalog.row_number()
                     OVER( 
                     PARTITION BY accountchurn_monitoredaccounts.monitoredaccountid
                     ORDER BY accountchurn_monitoredaccounts.lastmodifieddts DESC) AS acmonrank
                      FROM test.accountchurn_monitoredaccounts
                     WHERE accountchurn_monitoredaccounts.status::text = 'Completed'::text) maxacstat ON ach.rowid::text = maxacstat.monitoredaccountid::text
        WHERE ach.acchrank = 1 AND maxacstat.acmonrank = 1) cs ON a.doctorid::text = cs.accountid::text
  WHERE a.ordertype::text = 'New'::text AND a.dateinlocaldts >= date(cs.callstartdts) AND a.dateinvoicedlocaldts <= date_add('month'::text, 6::bigint, date(cs.callstartdts)::timestamp without time zone)) tot
  GROUP BY tot.accountid, tot.accounstatus_current, tot.callstartdts, tot.targetmodel, tot.suggested_product) sixa ON threeprior.accountid::text = sixa.accountid::text;


GRANT SELECT ON tableau.sls_a_customerexp TO _etl;
GRANT SELECT ON tableau.sls_a_customerexp TO operations;
GRANT SELECT ON tableau.sls_a_customerexp TO bidevelopers;
GRANT INSERT, SELECT, UPDATE, RULE, DELETE, TRIGGER, REFERENCES ON tableau.sls_a_customerexp TO cloudbeam;
GRANT SELECT ON tableau.sls_a_customerexp TO _ops;


COMMIT;
