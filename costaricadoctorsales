CREATE OR REPLACE VIEW staging.costaricadoctorsales
(
  doctorid,
  groupid,
  monthinvoiced,
  units,
  grosssales,
  discount,
  netsales,
  totaltax,
  totalcharge
)
AS 
 SELECT s.doctorid, d.groupid, s.monthinvoiced, s.units, s.grosssales, s.discount, s.netsales, s.totaltax, s.totalcharge
   FROM ( SELECT date_trunc('month'::character varying::text, o.dateinvoicedlocaldts) AS monthinvoiced, o.doctorid, sum(COALESCE(oi.quantity, 0::numeric::numeric(18,0))) AS units, sum(COALESCE(oi.totalcharge, 0::numeric::numeric(18,0)) - COALESCE(oi.totaltax, 0::numeric::numeric(18,0)) + (COALESCE(oi.discount, 0::numeric::numeric(18,0)) + COALESCE(oi.remakediscount, 0::numeric::numeric(18,0)))) AS grosssales, sum(COALESCE(oi.discount, 0::numeric::numeric(18,0)) + COALESCE(oi.remakediscount, 0::numeric::numeric(18,0))) AS discount, sum(COALESCE(oi.totalcharge, 0::numeric::numeric(18,0)) - COALESCE(oi.totaltax, 0::numeric::numeric(18,0))) AS netsales, sum(COALESCE(oi.totaltax, 0::numeric::numeric(18,0))) AS totaltax, sum(COALESCE(oi.totalcharge, 0::numeric::numeric(18,0))) AS totalcharge
           FROM fct."order" o
      JOIN fct.orderitem oi ON oi.orderid = o.orderid
   JOIN (( SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
              FROM dim.doctors d
         JOIN fct."order" o ON d.doctorid::text = o.doctorid::text
        WHERE ("left"(d.doctorid::text, 2) = '60'::character varying::text AND d.istestdoctor::text = 0::character varying::text OR d.doctorid::text = '10-1502365'::character varying::text OR d.doctorid::text = '70-1502365'::character varying::text) AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone
        GROUP BY d.doctorid, d.groupid, d.prismatikaccountnumber
       HAVING count(*) > 0
   UNION 
            SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
              FROM ( SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
                      FROM dim.doctors d
                 JOIN fct."order" o ON d.doctorid::text = o.doctorid::text
                WHERE "left"(d.doctorid::text, 2) = '60'::character varying::text AND d.istestdoctor::text = 0::character varying::text AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone AND d.groupid IS NOT NULL
                GROUP BY d.doctorid, d.groupid, d.prismatikaccountnumber
               HAVING count(*) > 0) a1
         JOIN dim.doctors d ON a1.groupid::text = d.groupid::text AND d.groupid IS NOT NULL AND d.istestdoctor::text = 0::character varying::text)
   UNION 
            SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
              FROM ( SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
                      FROM dim.doctors d
                 JOIN fct."order" o ON d.doctorid::text = o.doctorid::text AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone
                WHERE "left"(d.doctorid::text, 2) = '60'::character varying::text AND d.istestdoctor::text = 0::character varying::text AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone AND d.prismatikaccountnumber IS NOT NULL
                GROUP BY d.doctorid, d.groupid, d.prismatikaccountnumber
               HAVING count(*) > 0) a1
         JOIN dim.doctors d ON a1.prismatikaccountnumber::text = d.prismatikaccountnumber::text AND d.prismatikaccountnumber IS NOT NULL AND d.istestdoctor::text = 0::character varying::text) d ON d.doctorid::text = o.doctorid::text
  WHERE o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone
  GROUP BY date_trunc('month'::character varying::text, o.dateinvoicedlocaldts), o.doctorid) s
   JOIN dim.doctors d ON s.doctorid::text = d.doctorid::text;


CREATE OR REPLACE VIEW tableau.costaricadoctorsales
(
  doctorid,
  groupid,
  monthinvoiced,
  units,
  grosssales,
  discount,
  netsales,
  totaltax,
  totalcharge
)
AS 
 SELECT s.doctorid, d.groupid, s.monthinvoiced, s.units, s.grosssales, s.discount, s.netsales, s.totaltax, s.totalcharge
   FROM ( SELECT date_trunc('month'::character varying::text, o.dateinvoicedlocaldts) AS monthinvoiced, o.doctorid, sum(COALESCE(oi.quantity, 0::numeric::numeric(18,0))) AS units, sum(COALESCE(oi.totalcharge, 0::numeric::numeric(18,0)) - COALESCE(oi.totaltax, 0::numeric::numeric(18,0)) + (COALESCE(oi.discount, 0::numeric::numeric(18,0)) + COALESCE(oi.remakediscount, 0::numeric::numeric(18,0)))) AS grosssales, sum(COALESCE(oi.discount, 0::numeric::numeric(18,0)) + COALESCE(oi.remakediscount, 0::numeric::numeric(18,0))) AS discount, sum(COALESCE(oi.totalcharge, 0::numeric::numeric(18,0)) - COALESCE(oi.totaltax, 0::numeric::numeric(18,0))) AS netsales, sum(COALESCE(oi.totaltax, 0::numeric::numeric(18,0))) AS totaltax, sum(COALESCE(oi.totalcharge, 0::numeric::numeric(18,0))) AS totalcharge
           FROM fct."order" o
      JOIN fct.orderitem oi ON oi.orderid = o.orderid
   JOIN (( SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
              FROM dim.doctors d
         JOIN fct."order" o ON d.doctorid::text = o.doctorid::text
        WHERE ("left"(d.doctorid::text, 2) = '60'::character varying::text AND d.istestdoctor::text = 0::character varying::text OR d.doctorid::text = '10-1502365'::character varying::text OR d.doctorid::text = '70-1502365'::character varying::text) AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone
        GROUP BY d.doctorid, d.groupid, d.prismatikaccountnumber
       HAVING count(*) > 0
   UNION 
            SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
              FROM ( SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
                      FROM dim.doctors d
                 JOIN fct."order" o ON d.doctorid::text = o.doctorid::text
                WHERE "left"(d.doctorid::text, 2) = '60'::character varying::text AND d.istestdoctor::text = 0::character varying::text AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone AND d.groupid IS NOT NULL
                GROUP BY d.doctorid, d.groupid, d.prismatikaccountnumber
               HAVING count(*) > 0) a1
         JOIN dim.doctors d ON a1.groupid::text = d.groupid::text AND d.groupid IS NOT NULL AND d.istestdoctor::text = 0::character varying::text)
   UNION 
            SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
              FROM ( SELECT d.doctorid, d.groupid, d.prismatikaccountnumber
                      FROM dim.doctors d
                 JOIN fct."order" o ON d.doctorid::text = o.doctorid::text AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone
                WHERE "left"(d.doctorid::text, 2) = '60'::character varying::text AND d.istestdoctor::text = 0::character varying::text AND o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone AND d.prismatikaccountnumber IS NOT NULL
                GROUP BY d.doctorid, d.groupid, d.prismatikaccountnumber
               HAVING count(*) > 0) a1
         JOIN dim.doctors d ON a1.prismatikaccountnumber::text = d.prismatikaccountnumber::text AND d.prismatikaccountnumber IS NOT NULL AND d.istestdoctor::text = 0::character varying::text) d ON d.doctorid::text = o.doctorid::text
  WHERE o.dateinvoicedlocaldts >= '2012-01-01 00:00:00'::timestamp without time zone
  GROUP BY date_trunc('month'::character varying::text, o.dateinvoicedlocaldts), o.doctorid) s
   JOIN dim.doctors d ON s.doctorid::text = d.doctorid::text;


GRANT DELETE, RULE, SELECT, INSERT, REFERENCES, TRIGGER, UPDATE ON tableau.costaricadoctorsales TO _henryc;
GRANT TRIGGER, REFERENCES, RULE, UPDATE, DELETE, INSERT, SELECT ON tableau.costaricadoctorsales TO _tableau;
GRANT REFERENCES, DELETE, INSERT, UPDATE, TRIGGER, RULE, SELECT ON tableau.costaricadoctorsales TO _katiet;
GRANT REFERENCES, RULE, UPDATE, DELETE, TRIGGER, SELECT, INSERT ON tableau.costaricadoctorsales TO executive;
GRANT DELETE, TRIGGER, RULE, UPDATE, SELECT, REFERENCES, INSERT ON tableau.costaricadoctorsales TO operations;
GRANT UPDATE, DELETE, SELECT, REFERENCES, INSERT, TRIGGER, RULE ON tableau.costaricadoctorsales TO _johns;
GRANT UPDATE, INSERT, DELETE, RULE, SELECT, REFERENCES, TRIGGER ON tableau.costaricadoctorsales TO _kelseyo;
GRANT SELECT ON tableau.costaricadoctorsales TO _anthonyo;
GRANT SELECT ON tableau.costaricadoctorsales TO _lucy;
GRANT TRIGGER, SELECT, RULE, DELETE, REFERENCES, INSERT, UPDATE ON tableau.costaricadoctorsales TO cloudbeam;


COMMIT;
a
COMMIT;
